[1/10] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\esp\esp-idf\projects\smart-mails\build\bootloader\esp-idf\esptool_py && C:\Users\ori88\esp-idf\tools\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Users/ori88/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/esp/esp-idf/projects/smart-mails/build/bootloader/bootloader.bin"
Bootloader binary size 0x6700 bytes. 0x900 bytes (8%) free.
[2/8] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/smart-mails.c.obj
[3/8] Linking C static library esp-idf\main\libmain.a
[4/8] Generating ld/sections.ld
[5/8] Building C object CMakeFiles/smart-mails.elf.dir/project_elf_src_esp32.c.obj
[6/8] Linking CXX executable smart-mails.elf
[7/8] Generating binary image from built executable
esptool.py v4.4
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/esp/esp-idf/projects/smart-mails/build/smart-mails.bin
[8/8] cmd.exe /C "cd /D C:\esp\esp-idf\projects\smart-mails\build\esp-idf\esptool_py && C:\Users\ori88\esp-idf\tools\python_env\idf5.0_py3.8_env\Scripts\python.exe C:/Users/ori88/esp/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/esp/esp-idf/projects/smart-mails/build/partition_table/partition-table.bin C:/esp/esp-idf/projects/smart-mails/build/smart-mails.bin"
smart-mails.bin binary size 0x2d260 bytes. Smallest app partition is 0x100000 bytes. 0xd2da0 bytes (82%) free.
